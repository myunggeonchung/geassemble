async function onScan(e){console.log("scan\uc9c4\uc785");try{const o=new NDEFReader;await o.scan(),o.addEventListener("error",e=>{console.log("scanError"),alert("ScanError")}),o.addEventListener("reading",({message:o})=>{console.log(o.records),e(o.records);const c=new TextDecoder;for(const n of o.records)switch(n.recordType){case"text":const o=new TextDecoder(n.encoding);console.log(`Text: ${o.decode(n.data)} (${n.lang})`),e(o.decode(n.data));break;case"url":console.log("URL: "+c.decode(n.data));break;case"mime":if("application/json"===n.mediaType)console.log("JSON: "+JSON.parse(c.decode(n.data)));else if(n.mediaType.startsWith("image/")){const e=new Blob([n.data],{type:n.mediaType}),o=document.createElement("img");o.src=URL.createObjectURL(e),o.onload=()=>window.URL.revokeObjectURL(this.src),document.body.appendChild(o)}else console.log("Media not handled");break;default:console.log("Record not handled")}})}catch(o){console.log("scanError:"+o)}}async function onWrite(e,o){try{const c=new NDEFWriter;await c.write(e),console.log(e),o(!0)}catch(c){console.log("writeError:"+c),o(!1)}}